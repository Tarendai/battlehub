/*
 * CGlestBattleWindow.java
 *
 * Created on 12 December 2007, 00:54
 */

package org.darkstars.battlehub.gui;

import org.darkstars.battlehub.LMain;
import org.darkstars.battlehub.framework.CPlayer;
import org.darkstars.battlehub.battlemodels.IBattleModel;
import org.darkstars.battlehub.framework.CEvent;
import org.darkstars.battlehub.framework.IModule;
import org.darkstars.battlehub.gui.CUISettings;
import org.darkstars.battlehub.CUserSettings;
import java.awt.event.KeyEvent;
import javax.swing.SwingUtilities;
import org.darkstars.battlehub.CTextColours;
import org.darkstars.battlehub.framework.ICentralClass;
import org.darkstars.battlehub.framework.Misc;

/**
 *
 * @author  tarendai
 */
public class CBasicBattleWindow extends javax.swing.JFrame  implements IModule {
    private LMain LM = null;
    private String lastsent="";
    private IBattleModel battlemodel = null;
    
    /**
     * Creates new form CBasicBattleWindow
     * @param LM 
     * @param battlemodel
     */
    public CBasicBattleWindow(LMain LM, IBattleModel battlemodel) {
        
        this.battlemodel = battlemodel;
        this.LM = LM;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                initComponents();
            }
        });
    }

    private void SendMessage() {
        
        Runnable doWorkRunnable = new Runnable() {
            @Override
            public void run() {
                
                String[] lines = messageInput.getText().split("\n");
                for (int n = 0; n < lines.length; n++) {
                
                    String line = lines[n];

                    String[] command = line.split(" ");
                    
                    if (command[0].equalsIgnoreCase("/me")) {
                        battlemodel.SendChatActionMessage(Misc.makeSentence(command, 1));
                    } else {
                        battlemodel.SendChatMessage(line);
                    }
                }
                
                messageInput.setText("");
                messageInput.requestFocus();
            }
        };
        SwingUtilities.invokeLater(doWorkRunnable);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatToolBar = new javax.swing.JToolBar();
        MutliLineToggle = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageInput = new javax.swing.JTextArea();
        LockToggle = new javax.swing.JToggleButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        playerTablePanel = new org.darkstars.battlehub.gui.CPlayerTablePanel();
        chatpane = new org.darkstars.battlehub.gui.CChatPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Battle"); // NOI18N
        setIconImage(CUISettings.GetWindowIcon());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        chatToolBar.setFloatable(false);

        MutliLineToggle.setFont(CUISettings.GetFont(12,false));
        MutliLineToggle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/UI/multi_line.gif"))); // NOI18N
        MutliLineToggle.setSelected(Boolean.parseBoolean(CUserSettings.GetValue("ui.chat.multiline", "true")));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/darkstars/battlehub/languages"); // NOI18N
        MutliLineToggle.setText(bundle.getString("CChannel.MutliLineToggle.text")); // NOI18N
        MutliLineToggle.setFocusable(false);
        MutliLineToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MutliLineToggleActionPerformed(evt);
            }
        });
        chatToolBar.add(MutliLineToggle);

        jButton1.setText("Send"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start"); // NOI18N
        jButton2.setEnabled(battlemodel.AmIHost());
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Exit"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        messageInput.setColumns(20);
        messageInput.setRows(5);
        messageInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageInputKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(messageInput);

        LockToggle.setSelected(battlemodel.IsLocked());
        LockToggle.setText("Lock"); // NOI18N
        LockToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LockToggleActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerSize(10);
        jSplitPane1.setResizeWeight(0.8);
        jSplitPane1.setOneTouchExpandable(true);

        javax.swing.GroupLayout playerTablePanelLayout = new javax.swing.GroupLayout(playerTablePanel);
        playerTablePanel.setLayout(playerTablePanelLayout);
        playerTablePanelLayout.setHorizontalGroup(
            playerTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 525, Short.MAX_VALUE)
        );
        playerTablePanelLayout.setVerticalGroup(
            playerTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout chatpaneLayout = new javax.swing.GroupLayout(chatpane);
        chatpane.setLayout(chatpaneLayout);
        chatpaneLayout.setHorizontalGroup(
            chatpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        chatpaneLayout.setVerticalGroup(
            chatpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(chatpane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LockToggle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                            .addComponent(chatToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chatToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(LockToggle)))
                    .addComponent(jButton1))
                .addContainerGap())
        );

        chatToolBar.add(CSmileyManager.GetSmileyPicker(messageInput));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MutliLineToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MutliLineToggleActionPerformed
        CUserSettings.PutValue("ui.chat.multiline", String.valueOf(MutliLineToggle.isSelected()));
    }//GEN-LAST:event_MutliLineToggleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SendMessage();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void messageInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageInputKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (evt.isShiftDown()) {
                return;
            }
            SendMessage();
        }
}//GEN-LAST:event_messageInputKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.out.println("glest start button pressed");
        battlemodel.Start();
        System.out.println("glest start button pressed done");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        battlemodel.Exit();
    }//GEN-LAST:event_formWindowClosing

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        battlemodel.Exit();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void LockToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LockToggleActionPerformed
        battlemodel.SetLocked(LockToggle.isSelected());
}//GEN-LAST:event_LockToggleActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton LockToggle;
    private javax.swing.JToggleButton MutliLineToggle;
    private javax.swing.JToolBar chatToolBar;
    private org.darkstars.battlehub.gui.CChatPanel chatpane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea messageInput;
    private org.darkstars.battlehub.gui.CPlayerTablePanel playerTablePanel;
    // End of variables declaration//GEN-END:variables

    
    /**
     * 
     * @param s
     */
    public void AddMessage(final String s) {
        //String q =
        if (chatpane != null) {
            chatpane.AddMessage(s);
        }
    }
    
    /**
     * 
     * @param p 
     */
    public void AddPlayer(final CPlayer p){
        String flag = " ";
        //final CPlayer p = LM.playermanager.GetPlayer(name);
        
        if(Boolean.valueOf(CUserSettings.GetValue("ui.channelview.userjoinflags", "false"))){
            flag=p.GetFlagHTML(LM);
        }
        if(Boolean.valueOf(CUserSettings.GetValue("ui.channelview.userjoinranks", "false"))){
            flag+=p.GetRankHTML(LM);
        }
        
        AddMessage("<font face=\"Arial, Helvetica, sans-serif\" size=\"3\"><b>" + flag + p.name + " " + java.util.ResourceBundle.getBundle("aflobby/languages").getString("CBattleWindow.joined_the_battle"));
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                playerTablePanel.AddPlayer(p);
            }
        });
        
        
    }
    
    /**
     * 
     * @param name
     */
    public void RemovePlayer(final String name){
        AddMessage("<font face=\"Arial, Helvetica, sans-serif\" size=\"3\"><b>" + name + java.util.ResourceBundle.getBundle("aflobby/languages").getString("CBattleWindow.left_the_battle"));
        final CPlayer p = LMain.playermanager.GetPlayer(name);
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                playerTablePanel.RemovePlayer(p);
            }
        });
        
    }
    
    /**
     * 
     * @param L
     */
    @Override
    public void Init(final ICentralClass LM){
        //
        this.LM = (LMain) LM;
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                setVisible(true);
            }
        });
        
    }

    /**
     * 
     */
    @Override
    public void Update() {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * 
     * @param e
     */
    @Override
    public void NewEvent(final CEvent e) {
        
        if(e.IsEvent("SAIDBATTLE")){
            //
            final String time = CTextColours.getHTMLTimestamp();
            final String Msg = CTextColours.getChatHTML(Misc.makeSentence(e.data, 2),false);
            final String User = CTextColours.getUserChatHTML(e.data[1]);
            //logger.info(CStringHelper.GetTimestamp()+"<" + e.data[2] + "> " + Misc.makeSentence(e.data, 3));


            Runnable doWorkRunnable = new Runnable() {
                @Override
                public void run() {
                    if (MutliLineToggle.isSelected()) {
                        if (lastsent.equalsIgnoreCase(User.trim()) == false) {
                            AddMessage(User+"<br>" + time + Msg);
                            lastsent = User.trim();
                        } else {
                            AddMessage(time + Msg);
                        }
                    } else {
                        AddMessage(time + User + Msg);
                    }
                }
            };
            SwingUtilities.invokeLater(doWorkRunnable);
        } else if (e.IsEvent("SAIDBATTLEEX")) {
            // Add!!!!! SAIDEX main w00t heheh
            String time = CTextColours.getHTMLTimestamp();
            final String msg = CTextColours.getChatHTML(e.data[1] + " " + Misc.makeSentence(e.data, 2),true);
            AddMessage(time + msg);
            //logger.info(CStringHelper.GetTimestamp()+"*" + e.data[1] + " " + Misc.makeSentence(e.data, 2));
            lastsent = e.data[1];
        }
    }

    /**
     * 
     * @param e
     */
    @Override
    public void NewGUIEvent(CEvent e) {

    }
    
    @Override
    public void OnRemove() {
        battlemodel = null;
        LM = null;
    }

    @Override
    public void OnEvent(CEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void OnRemove(int channel) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
}
