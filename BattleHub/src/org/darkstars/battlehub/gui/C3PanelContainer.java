/*
 * C3PanelContainer.java
 *
 * Created on 20 July 2008, 17:39
 */
package org.darkstars.battlehub.gui;

import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import org.darkstars.battlehub.framework.CEvent;
import org.darkstars.battlehub.framework.ICentralClass;
import org.darkstars.battlehub.framework.IModule;

/**
 *
 * @author  AF-Standard
 */
public class C3PanelContainer extends javax.swing.JPanel implements IModule {

    /** Creates new form C3PanelContainer */
    public C3PanelContainer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        topRightPanel = new javax.swing.JPanel();
        topLeftPanel = new javax.swing.JPanel();
        bottomPanel = new javax.swing.JPanel();
        bottomRightPanel = new javax.swing.JPanel();
        bottomLeftPanel = new javax.swing.JPanel();
        middlePanel = new org.darkstars.battlehub.gui.CContainerPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        topRightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        topLeftPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addComponent(topLeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(topRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topRightPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(topLeftPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bottomRightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        bottomLeftPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addComponent(bottomLeftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(bottomRightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bottomRightPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(bottomLeftPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout middlePanelLayout = new javax.swing.GroupLayout(middlePanel);
        middlePanel.setLayout(middlePanelLayout);
        middlePanelLayout.setHorizontalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        middlePanelLayout.setVerticalGroup(
            middlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
            .addComponent(middlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(middlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomLeftPanel;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel bottomRightPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private org.darkstars.battlehub.gui.CContainerPanel middlePanel;
    private javax.swing.JPanel topLeftPanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel topRightPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void Init(ICentralClass L) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void Update() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void NewEvent(CEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void NewGUIEvent(CEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void OnRemove() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void OnEvent(CEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void OnRemove(int channel) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public enum EContainerLocation {
        //
        middle,
        topLeft,
        topRight,
        bottomLeft,
        bottomRight
    }

    public void AddObject(final JComponent c, EContainerLocation location) {

        if (location == EContainerLocation.middle) {
            SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                middlePanel.SetGUIObject(c);
            }});
        } else if (location == EContainerLocation.topRight) {
            SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                topRightPanel.add(c);
            }});
        } else if (location == EContainerLocation.topLeft) {
            //
            SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                topLeftPanel.add(c);
            }});
        } else if (location == EContainerLocation.bottomLeft) {
            //
            SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                bottomLeftPanel.add(c);
            }});
        } else if (location == EContainerLocation.bottomRight) {
            //
            SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                bottomRightPanel.add(c);
            }});
        }
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                validate();
                repaint();
            }
        });
    }

    public void RemoveObject(final JComponent c, final EContainerLocation location) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
//                if (location == EContainerLocation.middle) {
//                    middlePanel.SetGUIObject(c);
//                } else
                if (location == EContainerLocation.topRight) {
                    topRightPanel.remove(c);
                } else if (location == EContainerLocation.topLeft) {
                    topLeftPanel.remove(c);
                } else if (location == EContainerLocation.bottomLeft) {
                    bottomLeftPanel.remove(c);
                } else if (location == EContainerLocation.bottomRight) {
                    bottomRightPanel.remove(c);
                }

                validate();
                repaint();
            }
        });
    }

    public void RemoveAllObjects(final EContainerLocation location) {
        //
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {


                if (location == EContainerLocation.topRight) {
                    topRightPanel.removeAll();
                } else if (location == EContainerLocation.topLeft) {
                    topLeftPanel.removeAll();
                } else if (location == EContainerLocation.bottomLeft) {
                    bottomLeftPanel.removeAll();
                } else if (location == EContainerLocation.bottomRight) {
                    bottomRightPanel.removeAll();
                }
            // at some point set this up to load a loading page instead
//            case middle:{
//                middlePanel.(c);
//            }
            }
        });
    }
}
